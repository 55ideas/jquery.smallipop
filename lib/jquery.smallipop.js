// Generated by CoffeeScript 1.3.3
/*!
Smallipop (10/15/2012)
Copyright (c) 2011-2012 Small Improvements (http://www.small-improvements.com)

Licensed under the MIT (http://www.opensource.org/licenses/mit-license.php) license.

@author Sebastian Helzle (sebastian@helzle.net)
*/

(function($) {
  var sip;
  sip = $.smallipop = {
    version: '0.3.0-alpha',
    defaults: {
      contentAnimationSpeed: 150,
      cssAnimations: {
        enabled: false,
        show: 'animated fadeIn',
        hide: 'animated fadeOut'
      },
      funcEase: 'easeInOutQuad',
      handleInputs: true,
      hideTrigger: false,
      hideOnPopupClick: true,
      hideOnTriggerClick: true,
      horizontal: false,
      infoClass: 'smallipopHint',
      invertAnimation: false,
      popupOffset: 31,
      popupYOffset: 0,
      popupDistance: 20,
      popupDelay: 100,
      popupAnimationSpeed: 200,
      preferredPosition: 'top',
      theme: 'default',
      touchSupport: true,
      triggerAnimationSpeed: 150,
      triggerOnClick: false,
      onAfterHide: null,
      onAfterShow: null,
      onBeforeHide: null,
      onBeforeShow: null,
      windowPadding: 30
    },
    popup: null,
    lastId: 1,
    tours: {},
    lastScrollCheck: 0,
    currentTour: null,
    labels: {
      prev: 'Prev',
      next: 'Next',
      close: 'Close',
      of: 'of'
    },
    templates: {
      popup: '\
        <div id="smallipop">\
          <div class="sipContent"/>\
          <div class="sipArrowBorder"/>\
          <div class="sipArrow"/>\
        </div>'
    },
    _hideSmallipop: function(e) {
      var direction, popup, shownId, target, trigger, triggerOptions, xDistance, yDistance, _ref;
      popup = sip.popup;
      shownId = popup.data('shown');
      target = (e != null ? e.target : void 0) ? $(e.target) : null;
      trigger = $(".smallipop" + shownId);
      triggerOptions = ((_ref = trigger.data('smallipop')) != null ? _ref.options : void 0) || sip.defaults;
      if (target && trigger.length && (e != null ? e.type : void 0) === 'click' && ((!triggerOptions.hideOnTriggerClick && target.is(trigger)) || (!triggerOptions.hideOnPopupClick && popup.find(target).length))) {
        return;
      }
      if (shownId && triggerOptions.hideTrigger) {
        trigger.stop(true).fadeTo(triggerOptions.triggerAnimationSpeed, 1);
      }
      direction = triggerOptions.invertAnimation ? -1 : 1;
      xDistance = sip.popup.data('xDistance') * direction;
      yDistance = sip.popup.data('yDistance') * direction;
      popup.data({
        hideDelayTimer: null,
        beingShown: false
      });
      if (triggerOptions.cssAnimations.enabled) {
        popup.removeClass(triggerOptions.cssAnimations.show).addClass(triggerOptions.cssAnimations.hide).data('shown', '');
        return typeof triggerOptions.onAfterHide === "function" ? triggerOptions.onAfterHide() : void 0;
      } else {
        return popup.stop(true).animate({
          top: "-=" + xDistance + "px",
          left: "+=" + yDistance + "px",
          opacity: 0
        }, triggerOptions.popupAnimationSpeed, triggerOptions.funcEase, function() {
          var tip;
          tip = $(this);
          if (!tip.data('beingShown')) {
            tip.css('display', 'none').data('shown', '');
          }
          return typeof triggerOptions.onAfterHide === "function" ? triggerOptions.onAfterHide() : void 0;
        });
      }
    },
    _showSmallipop: function(e) {
      var self, triggerData, _ref;
      self = $(this);
      triggerData = self.data('smallipop');
      if (sip.popup.data('shown') !== triggerData.id && ((_ref = !triggerData.type) === 'checkbox' || _ref === 'radio')) {
        if (e != null) {
          e.preventDefault();
        }
      }
      return sip._triggerMouseover.call(this);
    },
    onTouchDevice: function() {
      return typeof Modernizr !== "undefined" && Modernizr !== null ? Modernizr.touch : void 0;
    },
    killTimers: function() {
      var hideTimer, popup, showTimer;
      popup = $.smallipop.popup;
      hideTimer = popup.data('hideDelayTimer');
      showTimer = popup.data('showDelayTimer');
      if (hideTimer) {
        clearTimeout(hideTimer);
      }
      if (showTimer) {
        return clearTimeout(showTimer);
      }
    },
    refreshPosition: function() {
      var animationTarget, beingShown, cssTarget, offset, options, popup, popupCenter, popupDistanceBottom, popupDistanceLeft, popupDistanceRight, popupDistanceTop, popupH, popupOffsetLeft, popupOffsetTop, popupW, popupY, selfHeight, selfWidth, selfY, shownId, trigger, win, winHeight, winWidth, windowPadding, xDistance, yDistance, yOffset;
      popup = sip.popup;
      shownId = popup.data('shown');
      if (!shownId) {
        return;
      }
      trigger = $(".smallipop" + shownId);
      options = trigger.data('smallipop').options;
      popup.removeClass(function(index, classNames) {
        return (classNames.match(/sip\w+/g) || []).join(' ');
      });
      popup.addClass(options.theme);
      win = $(window);
      xDistance = yDistance = options.popupDistance;
      yOffset = options.popupYOffset;
      offset = trigger.offset();
      popupH = popup.outerHeight();
      popupW = popup.outerWidth();
      popupCenter = popupW / 2;
      winWidth = win.width();
      winHeight = win.height();
      windowPadding = options.windowPadding;
      selfWidth = trigger.outerWidth();
      selfHeight = trigger.outerHeight();
      selfY = offset.top - win.scrollTop();
      popupOffsetLeft = offset.left + selfWidth / 2;
      popupOffsetTop = offset.top - popupH + yOffset;
      popupY = popupH + options.popupDistance - yOffset;
      popupDistanceTop = selfY - popupY;
      popupDistanceBottom = winHeight - selfY - selfHeight - popupY;
      popupDistanceLeft = offset.left - popupW - options.popupOffset;
      popupDistanceRight = winWidth - offset.left - selfWidth - popupW;
      if (options.horizontal) {
        xDistance = 0;
        popupOffsetTop += selfHeight / 2 + popupH / 2;
        if ((options.preferredPosition === 'left' && popupDistanceLeft > windowPadding) || popupDistanceRight < windowPadding) {
          popup.addClass('sipPositionedLeft');
          popupOffsetLeft = offset.left - popupW - options.popupOffset;
          yDistance = -yDistance;
        } else {
          popup.addClass('sipPositionedRight');
          popupOffsetLeft = offset.left + selfWidth + options.popupOffset;
        }
      } else {
        yDistance = 0;
        if (popupOffsetLeft + popupCenter > winWidth - windowPadding) {
          popupOffsetLeft -= popupCenter * 2 - options.popupOffset;
          popup.addClass('sipAlignLeft');
        } else if (popupOffsetLeft - popupCenter < windowPadding) {
          popupOffsetLeft -= options.popupOffset;
          popup.addClass('sipAlignRight');
        } else {
          popupOffsetLeft -= popupCenter;
        }
        if ((options.preferredPosition === 'bottom' && popupDistanceBottom > windowPadding) || popupDistanceTop < windowPadding) {
          popupOffsetTop += popupH + selfHeight - 2 * yOffset;
          xDistance = -xDistance;
          yOffset = 0;
          popup.addClass('sipAlignBottom');
        }
      }
      if (options.hideTrigger) {
        trigger.stop(true).fadeTo(options.triggerAnimationSpeed, 0);
      }
      beingShown = popup.data('beingShown');
      if (!beingShown || options.cssAnimations.enabled) {
        popupOffsetTop -= xDistance;
        popupOffsetLeft += yDistance;
        xDistance = 0;
        yDistance = 0;
      }
      popup.data({
        xDistance: xDistance,
        yDistance: yDistance
      });
      cssTarget = {
        top: popupOffsetTop,
        left: popupOffsetLeft,
        display: 'block',
        opacity: beingShown && !options.cssAnimations.enabled ? 0 : 1
      };
      animationTarget = {
        top: "-=" + xDistance + "px",
        left: "+=" + yDistance + "px",
        opacity: 1
      };
      if (options.cssAnimations.enabled) {
        popup.addClass(options.cssAnimations.show).css(cssTarget);
        if (beingShown) {
          return window.setTimeout(function() {
            popup.data('beingShown', false);
            return typeof options.onAfterShow === "function" ? options.onAfterShow(trigger) : void 0;
          }, options.popupAnimationSpeed);
        }
      } else {
        return popup.stop(true).css(cssTarget).animate(animationTarget, options.popupAnimationSpeed, options.funcEase, function() {
          if (beingShown) {
            popup.data('beingShown', false);
            return typeof options.onAfterShow === "function" ? options.onAfterShow(trigger) : void 0;
          }
        });
      }
    },
    _getTrigger: function(id) {
      return $(".smallipop" + id);
    },
    _showPopup: function(trigger, content) {
      var lastTrigger, lastTriggerOpt, popup, shownId, triggerData;
      if (content == null) {
        content = '';
      }
      popup = sip.popup;
      if (!popup.data('triggerHovered')) {
        return;
      }
      triggerData = trigger.data('smallipop');
      shownId = popup.data('shown');
      if (shownId) {
        lastTrigger = sip._getTrigger(shownId);
        lastTriggerOpt = lastTrigger.data('smallipop').options || sip.defaults;
        if (lastTriggerOpt.hideTrigger) {
          lastTrigger.stop(true).fadeTo(lastTriggerOpt.fadeSpeed, 1);
        }
      }
      popup.data({
        beingShown: true,
        shown: triggerData.id
      });
      sip.popupContent.html(content || triggerData.hint);
      if (triggerData.id !== shownId) {
        popup.removeClass();
      }
      return sip.refreshPosition();
    },
    _triggerMouseover: function() {
      var id, options, popup, self, shownId, _ref;
      self = $(this);
      popup = sip.popup;
      id = (_ref = self.data('smallipop')) != null ? _ref.id : void 0;
      shownId = popup.data('shown');
      sip.killTimers();
      popup.data((id ? 'triggerHovered' : 'hovered'), true);
      if (!id) {
        self = sip._getTrigger(shownId);
        id = shownId;
      }
      if (!self.length) {
        return;
      }
      options = self.data('smallipop').options;
      if (typeof options.onBeforeShow === "function") {
        options.onBeforeShow(self);
      }
      if (shownId !== id) {
        return popup.data('showDelayTimer', setTimeout(function() {
          return sip._showPopup(self);
        }, options.popupDelay));
      }
    },
    _triggerMouseout: function() {
      var id, options, popup, popupData, self, shownId, _ref;
      self = $(this);
      id = (_ref = self.data('smallipop')) != null ? _ref.id : void 0;
      popup = sip.popup;
      popupData = popup.data();
      shownId = popupData.shown;
      sip.killTimers();
      popup.data((id ? 'triggerHovered' : 'hovered'), false);
      if (!id) {
        self = sip._getTrigger(shownId);
      }
      options = self.data('smallipop').options;
      if (typeof options.onBeforeHide === "function") {
        options.onBeforeHide(self);
      }
      if (!(popupData.hovered || popupData.triggerHovered)) {
        return popup.data('hideDelayTimer', setTimeout(sip._hideSmallipop, 500));
      }
    },
    _onWindowResize: function() {
      return $.smallipop.refreshPosition();
    },
    _onWindowClick: function(e) {
      var popup, target;
      popup = sip.popup;
      target = $(e.target);
      if (!(target.is(popup) || target.closest('.sipInitialized').length || popup.data('beingShown'))) {
        return sip._hideSmallipop(e);
      }
    },
    _onWindowScroll: function(e) {
      var now;
      now = new Date().getTime();
      if (now - sip.lastScrollCheck < 200) {
        return;
      }
      sip.lastScrollCheck = now;
      return $.smallipop.refreshPosition();
    },
    setContent: function(content) {
      var options, shownId, trigger, _ref;
      shownId = sip.popup.data('shown');
      trigger = sip._getTrigger(shownId);
      options = (_ref = trigger.data('smallipop')) != null ? _ref.options : void 0;
      if (options) {
        return sip.popupContent.stop(true).fadeTo(options.contentAnimationSpeed, 0, function() {
          sip.popupContent.html(content).fadeTo(options.contentAnimationSpeed, 1);
          return sip.refreshPosition();
        });
      }
    },
    _runTour: function(trigger) {
      var currentTourItems, i, tourTitle, triggerData, _i, _ref, _results;
      triggerData = trigger.data('smallipop');
      tourTitle = triggerData != null ? triggerData.tourTitle : void 0;
      if (!(tourTitle && sip.tours[tourTitle])) {
        return;
      }
      sip.currentTour = tourTitle;
      sip.tours[tourTitle].sort(function(a, b) {
        return a.index - b.index;
      });
      currentTourItems = sip.tours[tourTitle];
      _results = [];
      for (i = _i = 0, _ref = currentTourItems.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (currentTourItems[i].id === triggerData.id) {
          _results.push(sip._tourShow(tourTitle, i));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    },
    _tourShow: function(title, index) {
      var closeButton, content, currentTourItems, nextButton, prevButton, trigger, triggerData;
      currentTourItems = sip.tours[title];
      trigger = currentTourItems[index].trigger;
      triggerData = trigger.data('smallipop');
      prevButton = index > 0 ? "<a href=\"#\" class=\"smallipop-tour-prev\">" + sip.labels.prev + "</a>" : '';
      nextButton = index < currentTourItems.length - 1 ? "<a href=\"#\" class=\"smallipop-tour-next\">" + sip.labels.next + "</a>" : '';
      closeButton = index === currentTourItems.length - 1 ? "<a href=\"#\" class=\"smallipop-tour-close\">" + sip.labels.close + "</a>" : '';
      content = "        <div class=\"smallipop-tour-content\">" + triggerData.hint + "</div>        <div class=\"smallipop-tour-footer\">          <div class=\"smallipop-tour-progress\">            " + (index + 1) + " " + sip.labels.of + " " + currentTourItems.length + "          </div>          " + prevButton + "          " + nextButton + "          " + closeButton + "          <br style=\"clear:both\"/>        </div>";
      sip.killTimers();
      sip.popup.data('triggerHovered', true);
      return sip._showPopup(trigger, content);
    },
    _tourNext: function(e) {
      var currentTourItems, i, shownId, _i, _ref;
      if (e != null) {
        e.preventDefault();
      }
      currentTourItems = sip.tours[sip.currentTour];
      if (!currentTourItems) {
        return;
      }
      shownId = sip.popup.data('shown') || currentTourItems[0].id;
      for (i = _i = 0, _ref = currentTourItems.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (currentTourItems[i].id === shownId && i !== currentTourItems.length - 1) {
          return sip._tourShow(sip.currentTour, i + 1);
        }
      }
    },
    _tourPrev: function(e) {
      var currentTourItems, i, shownId, _i, _ref;
      if (e != null) {
        e.preventDefault();
      }
      currentTourItems = sip.tours[sip.currentTour];
      if (!currentTourItems) {
        return;
      }
      shownId = sip.popup.data('shown') || currentTourItems[0].id;
      for (i = _i = 0, _ref = currentTourItems.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (currentTourItems[i].id === shownId && i !== 0) {
          return sip._tourShow(sip.currentTour, i - 1);
        }
      }
    },
    _tourClose: function(e) {
      if (e != null) {
        e.preventDefault();
      }
      return sip._hideSmallipop();
    },
    _destroy: function(instances) {
      return instances.each(function() {
        var data, self;
        self = $(this);
        data = self.data('smallipop');
        if (data) {
          return self.unbind('.smallipop').data('smallipop', {}).removeClass("smallipop sipInitialized smallipop" + data.id + " " + data.options.theme);
        }
      });
    },
    _init: function() {
      var popup;
      popup = sip.popup = $(sip.templates.popup.css('opacity', 0).data({
        xDistance: 0,
        yDistance: 0
      })).bind({
        'mouseover.smallipop': sip._triggerMouseover,
        'mouseout.smallipop': sip._triggerMouseout
      });
      sip.popupContent = popup.find('.sipContent');
      $('body').append(popup);
      popup.delegate('a', 'click.smallipop', sip._hideSmallipop).delegate('.smallipop-tour-prev', 'click.smallipop', sip._tourPrev).delegate('.smallipop-tour-next', 'click.smallipop', sip._tourNext).delegate('.smallipop-tour-close', 'click.smallipop', sip._tourClose);
      $(document).bind('click.smallipop touchend.smallipop', sip._onWindowClick);
      return $(window).bind({
        'resize.smallipop': sip._onWindowResize,
        'scroll.smallipop': sip._onWindowScroll
      });
    }
  };
  /* Add default easing function for smallipop to jQuery if missing
  */

  if (!$.easing.easeInOutQuad) {
    $.easing.easeInOutQuad = function(x, t, b, c, d) {
      if ((t /= d / 2) < 1) {
        return c / 2 * t * t + b;
      } else {
        return -c / 2 * ((--t) * (t - 2) - 1) + b;
      }
    };
  }
  return $.fn.smallipop = function(options, hint) {
    if (options == null) {
      options = {};
    }
    if (hint == null) {
      hint = '';
    }
    if (typeof options === 'string') {
      switch (options.toLowerCase()) {
        case 'show':
          sip._showSmallipop.call(this.first().get(0));
          break;
        case 'hide':
          sip._hideSmallipop();
          break;
        case 'destroy':
          sip._destroy(this);
          break;
        case 'tour':
          sip._runTour(this.first());
      }
      return this;
    }
    options = $.extend({}, sip.defaults, options);
    if (options.moveSpeed != null) {
      options.popupAnimationSpeed = options.moveSpeed;
    }
    if (options.hideSpeed != null) {
      options.triggerAnimationSpeed = options.hideSpeed;
    }
    if ((typeof Modernizr !== "undefined" && Modernizr !== null ? Modernizr.cssanimations : void 0) === false) {
      options.cssAnimations.enabled = false;
    }
    if (!sip.popup) {
      sip._init();
    }
    return this.each(function() {
      var isFormElement, newId, objHint, self, tagName, tourTitle, triggerData, triggerEvents, triggerOptions, type;
      self = $(this);
      tagName = self[0].tagName.toLowerCase();
      type = self.attr('type');
      triggerData = self.data();
      objHint = hint || self.attr('title') || self.find("." + options.infoClass).html();
      if (objHint && !self.hasClass('sipInitialized')) {
        newId = sip.lastId++;
        triggerOptions = $.extend(true, {}, options);
        triggerEvents = {};
        tourTitle = triggerData.smallipopTour;
        isFormElement = triggerOptions.handleInputs && (tagName === 'input' || tagName === 'select' || tagName === 'textarea');
        if (isFormElement) {
          triggerOptions.hideOnTriggerClick = false;
          triggerEvents['focus.smallipop'] = sip._triggerMouseover;
          triggerEvents['blur.smallipop'] = sip._triggerMouseout;
        } else {
          triggerEvents['mouseout.smallipop'] = sip._triggerMouseout;
        }
        if (triggerOptions.triggerOnClick || (triggerOptions.touchSupport && sip.onTouchDevice())) {
          triggerEvents['click.smallipop'] = sip._showSmallipop;
        } else {
          triggerEvents['click.smallipop'] = sip._hideSmallipop;
          triggerEvents['mouseover.smallipop'] = sip._triggerMouseover;
        }
        if (tourTitle) {
          if (!sip.tours[tourTitle]) {
            sip.tours[tourTitle] = [];
          }
          sip.tours[tourTitle].push({
            index: triggerData.smallipopIndex || 0,
            id: newId,
            trigger: self
          });
          triggerEvents = {};
          triggerOptions.hideOnTriggerClick = false;
          triggerOptions.hideOnPopupClick = false;
        }
        self.addClass("sipInitialized smallipop" + newId).attr('title', '').data('smallipop', {
          id: newId,
          hint: objHint,
          options: triggerOptions,
          tagName: tagName,
          type: type,
          tourTitle: tourTitle
        }).bind(triggerEvents);
        if (!triggerOptions.hideOnTriggerClick) {
          return self.delegate('a', 'click.smallipop', sip._hideSmallipop);
        }
      }
    });
  };
})(jQuery);
