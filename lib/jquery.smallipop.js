// Generated by CoffeeScript 1.3.3
/*!
Smallipop (09/28/2012)
Copyright (c) 2011-2012 Small Improvements (http://www.small-improvements.com)

Licensed under the MIT (http://www.opensource.org/licenses/mit-license.php) license.

@author Sebastian Helzle (sebastian@helzle.net)
*/

(function($) {
  $.smallipop = {
    version: '0.2.0-alpha',
    defaults: {
      contentAnimationSpeed: 150,
      cssAnimations: {
        enabled: false,
        show: 'animated fadeIn',
        hide: 'animated fadeOut'
      },
      funcEase: 'easeInOutQuad',
      handleInputs: true,
      hideTrigger: false,
      hideOnPopupClick: true,
      hideOnTriggerClick: true,
      horizontal: false,
      infoClass: 'smallipopHint',
      invertAnimation: false,
      popupOffset: 31,
      popupYOffset: 0,
      popupDistance: 20,
      popupDelay: 100,
      popupAnimationSpeed: 200,
      preferredPosition: 'top',
      theme: 'default',
      touchSupport: true,
      triggerAnimationSpeed: 150,
      triggerOnClick: false,
      onAfterHide: null,
      onAfterShow: null,
      onBeforeHide: null,
      onBeforeShow: null,
      windowPadding: 30
    },
    popup: null,
    lastId: 1,
    hideSmallipop: function(e) {
      var direction, popup, shownId, sip, target, trigger, triggerOptions, xDistance, yDistance;
      sip = $.smallipop;
      popup = sip.popup;
      shownId = popup.data('shown');
      target = (e != null ? e.target : void 0) ? $(e.target) : null;
      trigger = $(".smallipop" + shownId);
      triggerOptions = trigger.data('options') || sip.defaults;
      if (target && trigger.length && (e != null ? e.type : void 0) === 'click' && ((!triggerOptions.hideOnTriggerClick && target.is(trigger)) || (!triggerOptions.hideOnPopupClick && popup.find(target).length))) {
        return;
      }
      if (shownId && triggerOptions.hideTrigger) {
        trigger.stop(true).fadeTo(triggerOptions.triggerAnimationSpeed, 1);
      }
      direction = triggerOptions.invertAnimation ? -1 : 1;
      xDistance = sip.popup.data('xDistance') * direction;
      yDistance = sip.popup.data('yDistance') * direction;
      popup.data({
        hideDelayTimer: null,
        beingShown: false
      });
      if (triggerOptions.cssAnimations.enabled) {
        popup.removeClass(triggerOptions.cssAnimations.show).addClass(triggerOptions.cssAnimations.hide).data('shown', '');
        return typeof triggerOptions.onAfterHide === "function" ? triggerOptions.onAfterHide() : void 0;
      } else {
        return popup.stop(true).animate({
          top: "-=" + xDistance + "px",
          left: "+=" + yDistance + "px",
          opacity: 0
        }, triggerOptions.popupAnimationSpeed, triggerOptions.funcEase, function() {
          var tip;
          tip = $(this);
          if (!tip.data('beingShown')) {
            tip.css('display', 'none').data('shown', '');
          }
          return typeof triggerOptions.onAfterHide === "function" ? triggerOptions.onAfterHide() : void 0;
        });
      }
    },
    _showSmallipop: function(e) {
      var sip;
      sip = $.smallipop;
      if (sip.popup.data('shown') !== $(this).data('id')) {
        if (e != null) {
          e.preventDefault();
        }
      }
      return sip._triggerMouseover.call(this);
    },
    onTouchDevice: function() {
      return typeof Modernizr !== "undefined" && Modernizr !== null ? Modernizr.touch : void 0;
    },
    killTimers: function() {
      var hideTimer, popup, showTimer;
      popup = $.smallipop.popup;
      hideTimer = popup.data('hideDelayTimer');
      showTimer = popup.data('showDelayTimer');
      if (hideTimer) {
        clearTimeout(hideTimer);
      }
      if (showTimer) {
        return clearTimeout(showTimer);
      }
    },
    refreshPosition: function() {
      var animationTarget, beingShown, cssTarget, offset, options, popup, popupCenter, popupDistanceBottom, popupDistanceLeft, popupDistanceRight, popupDistanceTop, popupH, popupOffsetLeft, popupOffsetTop, popupW, popupY, selfHeight, selfWidth, selfY, shownId, sip, trigger, win, winHeight, winWidth, windowPadding, xDistance, yDistance, yOffset;
      sip = $.smallipop;
      popup = sip.popup;
      shownId = popup.data('shown');
      if (!shownId) {
        return;
      }
      trigger = $(".smallipop" + shownId);
      options = trigger.data('options');
      popup.removeClass().addClass(options.theme);
      win = $(window);
      xDistance = yDistance = options.popupDistance;
      yOffset = options.popupYOffset;
      offset = trigger.offset();
      popupH = popup.outerHeight();
      popupW = popup.outerWidth();
      popupCenter = popupW / 2;
      winWidth = win.width();
      winHeight = win.height();
      windowPadding = options.windowPadding;
      selfWidth = trigger.outerWidth();
      selfHeight = trigger.outerHeight();
      selfY = offset.top - win.scrollTop();
      popupOffsetLeft = offset.left + selfWidth / 2;
      popupOffsetTop = offset.top - popupH + yOffset;
      popupY = popupH + options.popupDistance - yOffset;
      popupDistanceTop = selfY - popupY;
      popupDistanceBottom = winHeight - selfY - selfHeight - popupY;
      popupDistanceLeft = offset.left - popupW - options.popupOffset;
      popupDistanceRight = winWidth - offset.left - selfWidth - popupW;
      if (options.horizontal) {
        xDistance = 0;
        popupOffsetTop += selfHeight / 2 + popupH / 2;
        if ((options.preferredPosition === 'left' && popupDistanceLeft > windowPadding) || popupDistanceRight < windowPadding) {
          popup.addClass('sipPositionedLeft');
          popupOffsetLeft = offset.left - popupW - options.popupOffset;
          yDistance = -yDistance;
        } else {
          popup.addClass('sipPositionedRight');
          popupOffsetLeft = offset.left + selfWidth + options.popupOffset;
        }
      } else {
        yDistance = 0;
        if (popupOffsetLeft + popupCenter > winWidth - windowPadding) {
          popupOffsetLeft -= popupCenter * 2 - options.popupOffset;
          popup.addClass('sipAlignLeft');
        } else if (popupOffsetLeft - popupCenter < windowPadding) {
          popupOffsetLeft -= options.popupOffset;
          popup.addClass('sipAlignRight');
        } else {
          popupOffsetLeft -= popupCenter;
        }
        if ((options.preferredPosition === 'bottom' && popupDistanceBottom > windowPadding) || popupDistanceTop < windowPadding) {
          popupOffsetTop += popupH + selfHeight - 2 * yOffset;
          xDistance = -xDistance;
          yOffset = 0;
          popup.addClass('sipAlignBottom');
        }
      }
      if (options.hideTrigger) {
        trigger.stop(true).fadeTo(options.triggerAnimationSpeed, 0);
      }
      beingShown = popup.data('beingShown');
      if (!beingShown || options.cssAnimations.enabled) {
        popupOffsetTop -= xDistance;
        popupOffsetLeft += yDistance;
        xDistance = 0;
        yDistance = 0;
      }
      popup.data({
        xDistance: xDistance,
        yDistance: yDistance
      });
      cssTarget = {
        top: popupOffsetTop,
        left: popupOffsetLeft,
        display: 'block',
        opacity: beingShown && !options.cssAnimations.enabled ? 0 : 1
      };
      animationTarget = {
        top: "-=" + xDistance + "px",
        left: "+=" + yDistance + "px",
        opacity: 1
      };
      if (options.cssAnimations.enabled) {
        popup.addClass(options.cssAnimations.show).css(cssTarget);
        if (beingShown) {
          popup.data('beingShown', false);
          return typeof options.onAfterShow === "function" ? options.onAfterShow(trigger) : void 0;
        }
      } else {
        return popup.stop(true).css(cssTarget).animate(animationTarget, options.popupAnimationSpeed, options.funcEase, function() {
          if (beingShown) {
            popup.data('beingShown', false);
            return typeof options.onAfterShow === "function" ? options.onAfterShow(trigger) : void 0;
          }
        });
      }
    },
    _getTrigger: function(id) {
      return $(".smallipop" + id);
    },
    _showPopup: function(trigger) {
      var hint, id, lastTrigger, lastTriggerOpt, options, popup, shownId, sip;
      sip = $.smallipop;
      popup = sip.popup;
      if (!popup.data('triggerHovered')) {
        return;
      }
      options = trigger.data('options');
      hint = trigger.data('hint');
      id = trigger.data('id');
      shownId = popup.data('shown');
      lastTrigger = sip._getTrigger(shownId);
      lastTriggerOpt = lastTrigger.data('options') || sip.defaults;
      if (shownId && lastTriggerOpt.hideTrigger) {
        lastTrigger.stop(true).fadeTo(lastTriggerOpt.fadeSpeed, 1);
      }
      popup.data({
        beingShown: true,
        shown: id
      });
      sip.popupContent.html(hint);
      return sip.refreshPosition();
    },
    _triggerMouseover: function() {
      var id, options, popup, self, shownId, sip;
      self = $(this);
      id = self.data('id');
      sip = $.smallipop;
      popup = sip.popup;
      shownId = popup.data('shown');
      sip.killTimers();
      popup.data((id ? 'triggerHovered' : 'hovered'), true);
      if (!id) {
        self = sip._getTrigger(shownId);
        id = shownId;
      }
      options = self.data('options');
      if (typeof options.onBeforeShow === "function") {
        options.onBeforeShow(self);
      }
      if (shownId !== id) {
        return popup.data('showDelayTimer', setTimeout(function() {
          return sip._showPopup(self);
        }, options.popupDelay));
      }
    },
    _triggerMouseout: function() {
      var id, options, popup, popupData, self, shownId, sip;
      self = $(this);
      id = self.data('id');
      sip = $.smallipop;
      popup = sip.popup;
      popupData = popup.data();
      shownId = popupData.shown;
      sip.killTimers();
      popup.data((id ? 'triggerHovered' : 'hovered'), false);
      if (!id) {
        self = sip._getTrigger(shownId);
      }
      options = self.data('options');
      if (typeof options.onBeforeHide === "function") {
        options.onBeforeHide(self);
      }
      if (!(popupData.hovered || popupData.triggerHovered)) {
        return popup.data('hideDelayTimer', setTimeout(sip.hideSmallipop, 500));
      }
    },
    _onWindowResize: function() {
      return $.smallipop.refreshPosition();
    },
    _onWindowClick: function(e) {
      var popup, sip, target;
      sip = $.smallipop;
      popup = sip.popup;
      target = $(e.target);
      if (!(target.is(popup) || target.closest('.sipInitialized').length)) {
        return sip.hideSmallipop(e);
      }
    },
    setContent: function(content) {
      var options, shownId, sip, trigger;
      sip = $.smallipop;
      shownId = sip.popup.data('shown');
      trigger = sip._getTrigger(shownId);
      options = trigger.data('options');
      return sip.popupContent.stop(true).fadeTo(options.contentAnimationSpeed, 0, function() {
        sip.popupContent.html(content).fadeTo(options.contentAnimationSpeed, 1);
        return sip.refreshPosition();
      });
    }
  };
  /* Add default easing function for smallipop to jQuery if missing
  */

  if (!$.easing.easeInOutQuad) {
    $.easing.easeInOutQuad = function(x, t, b, c, d) {
      if ((t /= d / 2) < 1) {
        return c / 2 * t * t + b;
      } else {
        return -c / 2 * ((--t) * (t - 2) - 1) + b;
      }
    };
  }
  return $.fn.smallipop = function(options, hint) {
    var popup, sip, triggerEvents;
    if (options == null) {
      options = {};
    }
    if (hint == null) {
      hint = '';
    }
    sip = $.smallipop;
    if (typeof options === 'string') {
      switch (options.toLowerCase()) {
        case 'show':
          sip._showSmallipop.call(this.first().get(0));
          break;
        case 'hide':
          sip.hideSmallipop();
      }
      return this;
    }
    options = $.extend({}, sip.defaults, options);
    if (options.moveSpeed != null) {
      options.popupAnimationSpeed = options.moveSpeed;
    }
    if (options.hideSpeed != null) {
      options.triggerAnimationSpeed = options.hideSpeed;
    }
    if ((typeof Modernizr !== "undefined" && Modernizr !== null ? Modernizr.cssanimations : void 0) === false) {
      options.cssAnimations.enabled = false;
    }
    triggerEvents = {};
    if (options.triggerOnClick || (options.touchSupport && sip.onTouchDevice())) {
      triggerEvents = {
        click: sip._showSmallipop,
        mouseout: sip._triggerMouseout
      };
    } else {
      triggerEvents = {
        mouseover: sip._triggerMouseover,
        mouseout: sip._triggerMouseout,
        click: sip.hideSmallipop
      };
    }
    popup = $('#smallipop');
    if (!popup.length) {
      popup = sip.popup = $('\
          <div id="smallipop">\
            <div class="sipContent"/>\
            <div class="sipArrowBorder"/>\
            <div class="sipArrow"/>\
          </div>\
        ').css('opacity', 0).data({
        xDistance: 0,
        yDistance: 0
      }).bind({
        mouseover: sip._triggerMouseover,
        mouseout: sip._triggerMouseout
      });
      sip.popupContent = popup.find('.sipContent');
      $('body').append(popup);
      popup.delegate('a', 'click', sip.hideSmallipop);
      $(document).bind('click touchend', sip._onWindowClick);
      $(window).bind('resize', sip._onWindowResize);
    }
    return this.each(function() {
      var newId, objHint, self, type;
      self = $(this);
      type = self[0].tagName.toLowerCase();
      objHint = hint || self.attr('title') || self.find("." + options.infoClass).html();
      if (objHint && !self.hasClass('sipInitialized')) {
        newId = sip.lastId++;
        self.addClass("sipInitialized smallipop" + newId).data({
          id: newId,
          options: options,
          hint: objHint
        }).attr('title', '').bind(triggerEvents);
        if (options.handleInputs && (type === 'input' || type === 'select' || type === 'textarea')) {
          self.bind({
            focus: sip._triggerMouseover,
            blur: sip._triggerMouseout
          }).data('options').hideOnTriggerClick = false;
        }
        if (!self.data('options').hideOnTriggerClick) {
          return self.delegate('a', 'click', sip.hideSmallipop);
        }
      }
    });
  };
})(jQuery);
